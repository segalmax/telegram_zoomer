"""
Shared translation functionality for the Telegram Zoomer Bot
"""

import os
import logging
import anthropic
import time
from tenacity import retry, stop_after_attempt, wait_exponential, before_sleep_log

logger = logging.getLogger(__name__)

# Initialize Anthropic client - will use the ANTHROPIC_API_KEY from environment
def get_anthropic_client(api_key):
    """Initialize the Anthropic client with the given API key"""
    logger.info("Initializing Anthropic Claude client")
    return anthropic.Anthropic(api_key=api_key)

def memory_block(mem, k=8):
    """
    Build a compact context for the LLM: numbered list of (very short) summaries
    plus URL. Example line:
    3. üáÆüá∑ –ò—Ä–∞–Ω –∑–∞—è–≤–∏–ª, —á—Ç–æ —É–≤–µ–ª–∏—á–∏—Ç –æ–±–æ–≥–∞—â–µ–Ω–∏–µ —É—Ä–∞–Ω–∞ –¥–æ 90% ‚Üí https://t.me/chan/123
    """
    block = []
    for i, m in enumerate(mem[:k], 1):
        # first sentence or 120 chars max
        summary = (m['translation_text'].split('.')[0])[:120].strip()
        block.append(f"{i}. {summary} ‚Üí {m['message_url']}")
    return "\n".join(block)

def make_linking_prompt(mem):
    """Create the system prompt for translation with semantic linking"""
    memory_list = memory_block(mem) if mem else "–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ—Å—Ç–æ–≤."
    
    return f"""<role>
–¢—ã –≤–µ–¥—ë—à—å –∫–∞–Ω–∞–ª –≤ —Å—Ç–∏–ª–µ Lurkmore ‚Äî —É–º–Ω—ã–π —Ü–∏–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω–∏–º–∞–µ—Ç –º–µ—Ö–∞–Ω–∏–∫—É –≤–ª–∞—Å—Ç–∏ –∏ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã, –≤–∏–¥–∏—Ç —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏, –Ω–µ –¥–∞–µ—Ç —Å–µ–±—è –Ω–∞–µ–±–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.
</role>

<thinking_instructions>
–ü–µ—Ä–µ–¥ –ø–µ—Ä–µ–≤–æ–¥–æ–º –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π:
1. –û—Å–Ω–æ–≤–Ω—É—é –º—ã—Å–ª—å –∏ —Å–∫—Ä—ã—Ç—ã–µ –º–æ—Ç–∏–≤—ã –≤ —Ç–µ–∫—Å—Ç–µ
2. –ö–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –∏—Ö –ª—É—á—à–∏–µ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã –≤ —Ä—É—Å—Å–∫–æ–º
3. –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–∏–ª–∏—Å—Ç–∏–∫—É –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
4. –°–≤—è–∑–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –ø–æ—Å—Ç–∞–º–∏ –∏–∑ –ø–∞–º—è—Ç–∏
5. –ù–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –∏ –µ–¥–∫–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –¥–ª—è RIGHT-BIDLO —Å—Ç–∏–ª—è
6. –û–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
</thinking_instructions>

<task>
1. –ü–ï–†–ï–í–ï–î–ò –≤—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç –≤ —Å—Ç–∏–ª–µ RIGHT-BIDLO
2. –î–û–ë–ê–í–¨ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã –∏–∑ –ø–∞–º—è—Ç–∏
</task>

<length_requirements>
–°–¢–†–û–ì–û 1-3 –∞–±–∑–∞—Ü–∞. –ù–ï –ë–û–õ–¨–®–ï.
- –ê–±–∑–∞—Ü 1: –ó–∞–≥–æ–ª–æ–≤–æ–∫ + –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
- –ê–±–∑–∞—Ü 2 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): –ê–Ω–∞–ª–∏–∑/–∫–æ–Ω—Ç–µ–∫—Å—Ç (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) 
- –ê–±–∑–∞—Ü 3 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): –í—ã–≤–æ–¥/—Å–ª–µ–¥—Å—Ç–≤–∏–µ (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)

–ú–ê–ö–°–ò–ú–£–ú 800 —Å–∏–º–≤–æ–ª–æ–≤ –≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª—ã –∏ —Å—Å—ã–ª–∫–∏.
</length_requirements>

<style_requirements>
‚Ä¢ –¢–æ–Ω: —Ü–∏–Ω–∏—á–Ω—ã–π, –Ω–æ –Ω–µ –∏—Å—Ç–µ—Ä–∏—á–Ω—ã–π
‚Ä¢ –Ø–∑—ã–∫: —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞ (–Ω–µ —Ç–æ–ª—å–∫–æ –º–∞—Ç –∏ —Å–ª–µ–Ω–≥)  
‚Ä¢ –ü–æ–¥—Ö–æ–¥: —Ñ–∞–∫—Ç–∏—á–Ω–æ —Å –µ–¥–∫–∏–º–∏ –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏
‚Ä¢ –§–æ–∫—É—Å: –º–æ—Ç–∏–≤—ã –ø–æ–ª–∏—Ç–∏–∫–æ–≤, —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏
‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–∫–∏: **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç** —Å –∫–ª—é—á–µ–≤–æ–π –º—ã—Å–ª—å—é
</style_requirements>

<linking_rules>
‚Ä¢ –ù–∞–π–¥–∏ 1-3 –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã –≤ —Ç–≤–æ—ë–º –ø–µ—Ä–µ–≤–æ–¥–µ
‚Ä¢ –î–ª—è –ö–ê–ñ–î–û–ô —Ç–µ–º—ã –ø–æ–∏—â–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Ö–æ–∂–∏–π –ø–æ—Å—Ç –∏–∑ –ø–∞–º—è—Ç–∏
‚Ä¢ –ü—Ä–µ–≤—Ä–∞—Ç–∏ –ö–û–†–û–¢–ö–£–Æ —Ñ—Ä–∞–∑—É –≤ —Å—Å—ã–ª–∫—É: [—Ç–µ–∫—Å—Ç](URL)
‚Ä¢ –ü–†–ê–í–ò–õ–¨–ù–û: [–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ —É–¥–∞—Ä—ã](URL), [29 –ø–æ–≥–∏–±—à–∏—Ö](URL), [–∏—Ä–∞–Ω—Å–∫–∏–µ –¥—Ä–æ–Ω—ã](URL)
‚Ä¢ –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: [29 –ø–æ–≥–∏–±—à–∏—Ö –≤ –†–∞–º–∞—Ç-–ì–∞–Ω–µ, –†–∏—à–æ–Ω –ª–µ-–¶–∏–æ–Ω–µ, –¢–∞–º—Ä–µ, –ë–∞—Ç-–Ø–º–µ](URL)
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 2-4 —Å–ª–æ–≤–∞ –≤ —Å—Å—ã–ª–∫–µ
‚Ä¢ –ò–≥–Ω–æ—Ä–∏—Ä—É–π –±—É–∫–≤–∞–ª—å–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª–æ–≤ ‚Äî –∏—â–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –°–ú–´–°–õ–ê
‚Ä¢ –ï—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–æ—Å—Ç–∞ –Ω–µ—Ç ‚Äî –Ω–µ –≤—Å—Ç–∞–≤–ª—è–π —Å—Å—ã–ª–∫—É
</linking_rules>

<character_constraints>
–ù–ò–ö–û–ì–î–ê –ù–ï –î–ï–õ–ê–ô:
√ó –®–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏ –∫–ª–∏—à–µ
√ó –ú–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä—ã –æ–¥–Ω–æ–π –º—ã—Å–ª–∏  
√ó –î–ª–∏–Ω–Ω—ã–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è
√ó –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –∏—Å—Ç–µ—Ä–∏–∫—É
√ó –û–±—ä—è—Å–Ω–µ–Ω–∏—è –æ—á–µ–≤–∏–¥–Ω–æ–≥–æ

–í–°–ï–ì–î–ê –î–ï–õ–ê–ô:
‚úì –û–±—ä—è—Å–Ω—è–π —Å–ª–æ–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
‚úì –ü–æ–∫–∞–∑—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—é
‚úì –£–∫–∞–∑—ã–≤–∞–π –Ω–∞ –º–æ—Ç–∏–≤—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚úì –°–æ—Ö—Ä–∞–Ω—è–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏ –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
</character_constraints>

<memory_context>
–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è —Å—Å—ã–ª–æ–∫:
{memory_list}
</memory_context>

<output_format>
–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç. –ù–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ –º–µ—Ç–∞-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
</output_format>"""

@retry(
    stop=stop_after_attempt(3), 
    wait=wait_exponential(multiplier=1, min=4, max=10),
    before_sleep=before_sleep_log(logger, logging.WARNING)
)
async def translate_and_link(client, src_text, mem):
    """
    Translate text and add semantic links in a single Claude call.
    This is the new unified approach that replaces separate translation and linking.
    """
    try:
        start_time = time.time()
        logger.info(f"Starting translation+linking for {len(src_text)} characters of text with {len(mem)} memory entries")
        
        # Get the combined prompt with memory context
        prompt = make_linking_prompt(mem)
        logger.info(f"Prompt length: {len(prompt)} characters")
        
        # Truncate text if it's extremely long for logging
        log_text = src_text[:100] + "..." if len(src_text) > 100 else src_text
        logger.info(f"Text to translate+link (truncated): {log_text}")
        
        # Make the API call to Claude Sonnet 4 with extended thinking for maximum quality
        logger.info(f"Sending request to Anthropic API using model: claude-sonnet-4-20250514 with extended thinking")
        api_start = time.time()
        resp = client.messages.create(
            model="claude-sonnet-4-20250514",  # Using latest Claude Sonnet 4
            max_tokens=16000,  # Must be greater than thinking budget_tokens (12000)
            temperature=1.0,  # Must be 1.0 when thinking is enabled
            thinking={
                "type": "enabled",
                "budget_tokens": 12000  # Substantial thinking budget for complex translation analysis
            },
            system=prompt,
            messages=[
                {"role": "user", "content": src_text}
            ]
        )
        api_time = time.time() - api_start
        logger.info(f"Anthropic API call with extended thinking completed in {api_time:.2f} seconds")
        
        # Extract and return the result (we only want the final text, not the thinking)
        # With thinking mode, response contains both thinking blocks and text blocks
        result = None
        for content_block in resp.content:
            if hasattr(content_block, 'text') and content_block.text:
                result = content_block.text.strip()
                break
        
        if not result:
            logger.error("No text content found in API response")
            raise ValueError("No text content found in API response")
        
        total_time = time.time() - start_time
        
        result_snippet = result[:100] + "..." if len(result) > 100 else result
        logger.info(f"Translation+linking result (truncated): {result_snippet}")
        logger.info(f"Translation+linking with extended thinking completed in {total_time:.2f} seconds")
        
        # Validate result contains Russian characters
        has_russian = any(ord('–∞') <= ord(c) <= ord('—è') or ord('–ê') <= ord(c) <= ord('–Ø') for c in result)
        if not has_russian:
            logger.warning("Translation result doesn't contain Russian characters!")
        
        return result
    except Exception as e:
        logger.error(f"Anthropic API error: {str(e)}", exc_info=True)
        logger.error(f"Failed to translate+link text of length {len(src_text)}")
        raise

 